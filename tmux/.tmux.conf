# Set delay between <prefix> and 'command'
set-option -sg escape-time 1

# Set the key repeat time to 250ms (default is 500ms)
set -g repeat-time 250

# Attempt to set the terminal clipboard content using the xterm escape sequence.
# - on = tmux will both accept the escape sequence to create a buffer and attempt to set the terminal clipboard
# - external = tmux will attempt to set the terminal clipboard but ignore attempts by applications to set tmux buffers
# - off = tmux will neither accept the clipboard escape sequence nor attempt to set the terminal clipboard
set-option -s set-clipboard on

# Set the amount of time, in ms, for which status l ine messages and other on-screen indicators are displayed.
# If set to 0, display until a key is pressed.
set-option -g display-time 2500

set-option -g mouse on

# Use vi- (or emacs-) style key bindings in the status line, for example, at the command prompt. The default
# is emacs unless VISUAL or EDITOR are set to vi.
set-option -g status-keys vi

set-option -g clock-mode-style 24

set-option -sg alternate-screen on

#set-option -s default-terminal "xterm-24bit"
#set-option -sa terminal-overrides ",xterm-256color:Tc,xterm-24bit:Tc"
#set-option -g default-terminal "screen-256color"

# Allow the use of vim key bindings for navigating the history buffer, e.g. C-u, C-d
set-window-option -g mode-keys vi

# TODO: Need to know if HAS_WSL == 1 to set clipboard key bindings
# Set a Tmux environment variable, HAS_WSL, so that we can know if we have WSL.
#run-shell -bC 'tmux set-environment -g HAS_WSL "$([[ "$(cat /proc/version | cut -d " " -f 3 | cut -d - -f 4)" =~ "WSL" ]] && "1" || "0")"'
#hidden HAS_WSL=0
#f-shell -b '[[ "$(cat /proc/version | cut -d ' ' -f 3 | cut -d - -f 4)" =~ "WSL" ]]' {
#   %hidden HAS_WSL=1

# Detect tmux version
# NOTE: the match modifier was introduced with 3.0... :(
#       So, run a shell command to set a TMUX_VERSION environment variable with the version of TMUX.
run-shell 'tmux set-environment -g TMUX_VERSION $(tmux -V | grep -E "[1-9][0-9]*\.[0-9][a-z]?" | cut -d" " -f 2)'

# NOTE: tmux 2.7+ supports 24-bit color!
# TODO: xterm-24bit is a special terminal profile I made.
# TODO: if it doesn't exist on the system, see if a terminal-feature can be used, e.g. ccolour.
if-shell -b 'test "-n \"$TMUX_VERSION\" && \"$TMUX_VERSION\" =~ ^(2\.[7-9]|([3-9]|[1-9][0-9]+)\.[0-9])[a-z]?$"' \
    'set-option -s default-terminal "xterm-24bit"; set-option -sa terminal-overrides ",xterm-24:Tc"' \
    'set-option -s default-terminal "xterm-256color"; set-option -sa terminal-overrides ",xterm-256color:Tc"'


# TMUX 3.0-1 supports terminal-overrides, where TMUX 3.2+ added terminal-features
if-shell -b 'test "-n \"$TMUX_VERSION\" && \"$TMUX_VERSION\" =~ ^(3\.[2-9]|([4-9]|[1-9][0-9]+)\.[0-9])[a-z]?"' \
    'set -s terminal-features "clipboard:ccolour:cstyle:focus:hyperlinks:osc7:overline:RGB:strikethrough:title:usstyle"' \
    'set-option -sa terminal-overrides ",Setulc:Smol"'

if-shell -b 'test "\"$TERM\" = \"foot\"' \
    'set -s default-terminal "foot"'


# Allows to send <C-b> to another application, i.e. Vim.
bind C-b send-prefix

# Set a shortcut for reloading the Tmux configuration
bind C-r source-file '~/.tmux.conf' \; display-message 'Configuration reloaded.'

# Remove existing C-b [ binding to enter copy mode and set it to C-b v instead.
#unbind '['
#bind -n v copy-mode
#bind -n C-Insert copy-mode
#bind -n S-Insert paste-buffer

# Allow the use of vim key bindings for selecting/copying text in the history buffer
unbind -T copy-mode-vi Space; # Default for begin-selection
unbind -T copy-mode-vi Enter; # Default for copy-selection
bind -T copy-mode-vi v send-keys -X begin-selection
## TODO: change this for WSL
## TODO: xsel or xclip for Manjaro?? Adjust accordingly
## TODO: what about at the console?
#bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xsel -- clipboard"
## For WSL:
unbind -T copy-mode-vi C-j; # Default for copy to system clipboard
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel
#bind -n M-c run -b "tmux show-buffer | clip.exe"

# Eaiser to remember bindings for creating window panes.
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"
unbind "'"
unbind '"'
unbind %

# Vim-like bindings for moving between panes
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Vim-like bindings for moving between windows
bind -r C-h select-window -t :-
bind -r C-l select-window -t :+

# Mappings to swap windows left/right
bind -r "<" swap-window -d -t -1
bind -r ">" swap-window -d -t +1

# Vim-like bindings for resizing windows...although,
# the built-in <C-[URDL]Arrow> and <M-[URDL]Arrow> bindings
# work good enough... These, even though specified with -r,
# don't repeat. I suspect it may be a Cygwin/Msys2 thing.
bind -r H resize-pane -L 1
bind -r J resize-pane -D 1
bind -r K resize-pane -U 1
bind -r L resize-pane -R 1

# Spaceduck Theme!
# Default bar calor
#set-option -g status-style bg='#1b1c36',fg='#ecf0c1'

# Active Pane
#set -g pane-active-border-style "fg=#5ccc96"

# Inactive Pane
#set -g pane-border-style "fg=#686f9a"

# Active Window
#set-option -g window-status-current-style bg='#686f9a',fg='#ffffff'

# Message
#set-option -g message-style bg='#686f9a',fg='#ecf0c1'
#set-option -g message-command-style bg='#686f9a',fg='#ecf0c1'

# When Commands are run
#set -g message-style "fg=#0f111b,bg=#686f9a"


# Ayu Theme!
#color_black='#101521'
#color_blue='#5ccfe6'
#color_yellow='#e6b450'
#color_red='#f28779'
#color_white='#cbccc6'
#color_white='#e6e1cf'
#color_green='#bae67e'
#color_visual_grey='#607080'
#color_visual_grey='#253340'
#color_comment_grey='#5c6773'

color_black='#000000'
color_red='#ff3333'
color_green='#b8cc52'
color_yellow='#e7c547'
color_blue='#36a3d9'
color_magenta='#f07178'
color_cyan='#95e6cb'
color_white='#ffffff'
color_bblack='#323232'
color_bred='#ff6565'
color_bgreen='#eafe84'
color_byellow='#fff779'
color_bblue='#68d5ff'
color_bmagenta='#ffa3aa'
color_bcyan='#c7fffd'
color_bwhite='#ffffff'
color_fg='#e6e1cf'
color_bg='#0f1419'
color_visual_grey='#607080'
color_visual_grey='#253340'
color_comment_grey='#5c6773'

#set -gq status on
#set -gq status-justify left
#set -gq status-left-length 100
#set -gq status-right-length 100
#set -gq status-right-attr none
set -gq message-fg "$color_fg"
set -gq message-bg "$color_bg"
set -gq message-command-fg "$color_fg"
set -gq message-command-bg "$color_bg"
#set -gq status-attr none
#set -gq status-left-attr none
setw -gq window-status-fg "$color_bg"
setw -gq window-status-bg "$color_bg"
#setw -gq window-status-attr none

setw -gq window-status-activity-bg "$color_bg"
setw -gq window-status-activity-fg "$color_bg"
#setw -gq window-status-activity-attr none
setw -gq window-status-separator ''

#set -gq window-style "fg=$color_comment_gray"
set -gq window-style "fg=$color_bblack"
set -gq window-active-style "fg=$color_white"

set -gq pane-border-fg "$color_white"
set -gq pane-border-bg "$color_black"
set -gq pane-active-border-fg "$color_green"
set -gq pane-active-border-bg "$color_black"

set -gq display-panes-active-color "$color_yellow"
set -gq display-panes-color "$color_blue"

#set -gq status-bg "$color_visual_grey"
set -gq status-bg "$color_bblack"
set -gq status-fg "$color_white"

set -g @ayu_status_widgets ''
set -g @ayu_time_format '%R'
set -g @ayu_date_format '%d.%m.%Y'
set -gq @prefix_highlight_fg "$color_green"
set -gq @prefix_highlight_bg "$color_green"
set -gq @prefix_highlight_copy_mode_attr "fg=$color_bblack,bg=$color_green"
set -gq @prefix_highlight_output_prefix "  "


status_widgets="#{@ayu_status_widgets}"
time_format="#{T:@ayu_time_format}"
date_format="#{T:@ayu_date_format}"

#status_right_original=#{show-option -gqv status-right}
#status_left_original=#{show-option -gqv status-left}
#window_status_format_original=#{show-option -gqv window-status-format}
#window_status_current_format_original=#{window-status-current-format}

set -gq status-right "#[fg=$color_comment_grey,bg=$color_visual_grey]#[fg=$color_comment_grey,bg=$color_comment_grey]#[fg=$color_black, bg=$color_comment_grey]${status_widgets}  ${date_format}   ${time_format}  #[fg=$color_blue,bg=$color_comment_grey,nobold,nounderscore,noitalics]#[fg=$color_black,bg=$color_blue,bold] #h"
set -gq status-left "#[fg=$color_black,bg=$color_green,bold]  #S #{prefix_highlight}#[fg=$color_green,bg=$color_comment_grey,nobold,nounderscore,noitalics]"

set -gq window-status-format "#[fg=$color_comment_grey,bg=$color_comment_grey,nobold,nounderscore,noitalics] #[fg=$color_black,bg=$color_comment_grey] #I#[fg=$color_comment_grey,bg=$color_black]#[fg=$color_comment_grey,bg=$color_black] #W#{?!=:#{window_flags},  #F }"
set -gq window-status-current-format "#[fg=$color_black,bg=$color_yellow,nobold,nounderscore,noitalics]#[fg=$color_black,bg=$color_yellow,nobold] #I #[fg=$color_yellow,bg=$color_blue]#[fg=$color_black,bg=$color_blue] #W #[fg=$color_blue,bg=$color_black,nobold,nounderscore,noitalics]"

set -g @tpm_plugins '           \
    tmux-plugins/tpm            \
    tmux-plugins/tmux-sensible  \
    tmux-plugins/tmux-resurrect \
    tmux-plugins/tmux-continuum \
'

# Install/configure tmux-resurrect to save/restore tmux sessions and vim windows
#set -g @plugin 'tmux-plugins/tmux-resurrect'

# Restore any vim sessions when a tmux session is restored
set -g @resurrect-strategy-vim 'session'
set -g @resurrect-capture-pane-contents 'on'

setenv -g TMUX_PLUGIN_MANAGER_PATH "$HOME/.tmux/plugins/"
if "test ! -d $HOME/.tmux/plugins/tpm" \
    "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && $HOME/.tmux/plugins/tpm/bin/install_plugins'"

run '~/.tmux/plugins/tpm/tpm'
